
lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000001c6  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000811  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fe  00000000  00000000  00000b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ed  00000000  00000000  0000121b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001508  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000392  00000000  00000000  000015b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ef  00000000  00000000  00001946  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001a35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 98 00 	call	0x130	; 0x130 <main>
  8e:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <myUart>:
// Mis funciones

void myUart()
{
	// Modo de uso tipo asyncrono UMLSEL0 -> 00
	UCSR0C &= ~(1 << UMSEL00);
  96:	e2 ec       	ldi	r30, 0xC2	; 194
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	8f 7b       	andi	r24, 0xBF	; 191
  9e:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UMSEL01);
  a0:	80 81       	ld	r24, Z
  a2:	8f 77       	andi	r24, 0x7F	; 127
  a4:	80 83       	st	Z, r24

	// Desactivar paridad UPM0 -> 01
	UCSR0C &= ~(1 << UPM00);
  a6:	80 81       	ld	r24, Z
  a8:	8f 7e       	andi	r24, 0xEF	; 239
  aa:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UPM01);
  ac:	80 81       	ld	r24, Z
  ae:	8f 7d       	andi	r24, 0xDF	; 223
  b0:	80 83       	st	Z, r24

	// Parada con un bit USB -> 0 y si tiene 1 entonces define 2bit de parada
	UCSR0C &= ~(1 << USBS0);
  b2:	80 81       	ld	r24, Z
  b4:	87 7f       	andi	r24, 0xF7	; 247
  b6:	80 83       	st	Z, r24

	// Definir tamaï¿½o de datos a 8bits
	UCSR0C |= (1 << UCSZ00);  // 1
  b8:	80 81       	ld	r24, Z
  ba:	82 60       	ori	r24, 0x02	; 2
  bc:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01);  // 1
  be:	80 81       	ld	r24, Z
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	80 83       	st	Z, r24
	UCSR0B &= ~(1 << UCSZ02); // 0
  c4:	e1 ec       	ldi	r30, 0xC1	; 193
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	8b 7f       	andi	r24, 0xFB	; 251
  cc:	80 83       	st	Z, r24

	// Calculo del Baudrate
	UCSR0A |= (1 << U2X0);
  ce:	a0 ec       	ldi	r26, 0xC0	; 192
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	8c 91       	ld	r24, X
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	8c 93       	st	X, r24
	// --> Valor del registro UBRRn
	UBRR0 = (F_CPU / 8 / 9600) - 1;
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  e0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Configuracion de pines RX & TX
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);
  e4:	80 81       	ld	r24, Z
  e6:	88 61       	ori	r24, 0x18	; 24
  e8:	80 83       	st	Z, r24

	// Activamos la interrupcion RX
	UCSR0B |= (1 << RXCIE0);
  ea:	80 81       	ld	r24, Z
  ec:	80 68       	ori	r24, 0x80	; 128
  ee:	80 83       	st	Z, r24

	// Activamos interrupciones
	sei();
  f0:	78 94       	sei
  f2:	08 95       	ret

000000f4 <imprimir>:
}

void imprimir(char texto[])
{
  f4:	dc 01       	movw	r26, r24
	char ntext = (unsigned)strlen(texto);
  f6:	fc 01       	movw	r30, r24
  f8:	01 90       	ld	r0, Z+
  fa:	00 20       	and	r0, r0
  fc:	e9 f7       	brne	.-6      	; 0xf8 <imprimir+0x4>
  fe:	31 97       	sbiw	r30, 0x01	; 1
 100:	bf 01       	movw	r22, r30
 102:	68 1b       	sub	r22, r24
 104:	79 0b       	sbc	r23, r25

	for (int i = 0; i < (int)(ntext); i++)
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	0c c0       	rjmp	.+24     	; 0x124 <imprimir+0x30>
	{
		// Verificar si la transmicion esta libre
		while (!(UCSR0A & (1 << UDRE0)))
 10c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 110:	95 ff       	sbrs	r25, 5
 112:	fc cf       	rjmp	.-8      	; 0x10c <imprimir+0x18>
			;
		UDR0 = texto[i];
 114:	fd 01       	movw	r30, r26
 116:	e2 0f       	add	r30, r18
 118:	f3 1f       	adc	r31, r19
 11a:	90 81       	ld	r25, Z
 11c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

void imprimir(char texto[])
{
	char ntext = (unsigned)strlen(texto);

	for (int i = 0; i < (int)(ntext); i++)
 120:	2f 5f       	subi	r18, 0xFF	; 255
 122:	3f 4f       	sbci	r19, 0xFF	; 255
 124:	ab 01       	movw	r20, r22
 126:	55 27       	eor	r21, r21
 128:	24 17       	cp	r18, r20
 12a:	35 07       	cpc	r19, r21
 12c:	7c f3       	brlt	.-34     	; 0x10c <imprimir+0x18>
		// Verificar si la transmicion esta libre
		while (!(UCSR0A & (1 << UDRE0)))
			;
		UDR0 = texto[i];
	}
}
 12e:	08 95       	ret

00000130 <main>:
char myBuffer = ' ';

int main(void)
{
	// Apagar todas las interrupciones con <avr/interrupt.h>
	cli();
 130:	f8 94       	cli

	// Iniciar comunicacion UART
	myUart();
 132:	0e 94 4b 00 	call	0x96	; 0x96 <myUart>

	// Mensaje de inicio
	imprimir(msm);
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 7a 00 	call	0xf4	; 0xf4 <imprimir>
 13e:	ff cf       	rjmp	.-2      	; 0x13e <main+0xe>

00000140 <serialLed>:
}

void serialLed()
{
	// Almacenamos dato actual
	myBuffer = UDR0;
 140:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 144:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>

	// Verificar si la transmicion esta libre
	while (!(UCSR0A & (1 << UDRE0)))
 148:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 14c:	85 ff       	sbrs	r24, 5
 14e:	fc cf       	rjmp	.-8      	; 0x148 <serialLed+0x8>
		;

	// Encender led
	if (myBuffer == 'D')
 150:	94 34       	cpi	r25, 0x44	; 68
 152:	81 f4       	brne	.+32     	; 0x174 <serialLed+0x34>
	{
		PORTB ^= (1 << 4);
 154:	95 b1       	in	r25, 0x05	; 5
 156:	80 e1       	ldi	r24, 0x10	; 16
 158:	89 27       	eor	r24, r25
 15a:	85 b9       	out	0x05, r24	; 5

		if (PORTB & (1 << 4))
 15c:	2c 9b       	sbis	0x05, 4	; 5
 15e:	05 c0       	rjmp	.+10     	; 0x16a <serialLed+0x2a>
		{
			imprimir(LedOnTx);
 160:	89 e1       	ldi	r24, 0x19	; 25
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 7a 00 	call	0xf4	; 0xf4 <imprimir>
 168:	08 95       	ret
		}
		else
		{
			imprimir(LedOffTx);
 16a:	8f e0       	ldi	r24, 0x0F	; 15
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	0e 94 7a 00 	call	0xf4	; 0xf4 <imprimir>
 172:	08 95       	ret
		}
	}
	else
	{
		UDR0 = myBuffer;
 174:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 178:	08 95       	ret

0000017a <__vector_18>:
	{
	}
}

ISR(USART_RX_vect)
{
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	serialLed();
 19c:	0e 94 a0 00 	call	0x140	; 0x140 <serialLed>
}
 1a0:	ff 91       	pop	r31
 1a2:	ef 91       	pop	r30
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
