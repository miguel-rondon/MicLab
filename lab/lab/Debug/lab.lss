
lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000015c  000001d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000755  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006a4  00000000  00000000  000009c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c8  00000000  00000000  00001069  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000397  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006b  00000000  00000000  000016ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000176a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e5       	ldi	r30, 0x5C	; 92
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 ac 00 	jmp	0x158	; 0x158 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:

// Para el ejemplo
#define numeroBits 12

int main(void)
{
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
  9e:	2c 97       	sbiw	r28, 0x0c	; 12
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	f8 94       	cli
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	cd bf       	out	0x3d, r28	; 61
	// Ejemplo
	// --> Ejemplo de envio de mensaje
	char datos[numeroBits] = "Hello World\r";
  aa:	8c e0       	ldi	r24, 0x0C	; 12
  ac:	e0 e0       	ldi	r30, 0x00	; 0
  ae:	f1 e0       	ldi	r31, 0x01	; 1
  b0:	de 01       	movw	r26, r28
  b2:	11 96       	adiw	r26, 0x01	; 1
  b4:	01 90       	ld	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	8a 95       	dec	r24
  ba:	e1 f7       	brne	.-8      	; 0xb4 <main+0x1e>

	// Apagar todas las interrupciones con <avr/interrupt.h>
	cli();
  bc:	f8 94       	cli

	// Modo de uso tipo asyncrono UMLSEL0 -> 00
	UCSR0C &= ~(1 << UMSEL00);
  be:	e2 ec       	ldi	r30, 0xC2	; 194
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8f 7b       	andi	r24, 0xBF	; 191
  c6:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UMSEL01);
  c8:	80 81       	ld	r24, Z
  ca:	8f 77       	andi	r24, 0x7F	; 127
  cc:	80 83       	st	Z, r24

	// Desactivar paridad UPM0 -> 01
	UCSR0C &= ~(1 << UPM00);
  ce:	80 81       	ld	r24, Z
  d0:	8f 7e       	andi	r24, 0xEF	; 239
  d2:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UPM01);
  d4:	80 81       	ld	r24, Z
  d6:	8f 7d       	andi	r24, 0xDF	; 223
  d8:	80 83       	st	Z, r24

	// Parada con un bit USB -> 0
	UCSR0C &= ~(1 << USBS0);
  da:	80 81       	ld	r24, Z
  dc:	87 7f       	andi	r24, 0xF7	; 247
  de:	80 83       	st	Z, r24

	// Definir tamaï¿½o de datos a 8bits
	UCSR0C |= (1 << UCSZ00);
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01);
  e6:	80 81       	ld	r24, Z
  e8:	84 60       	ori	r24, 0x04	; 4
  ea:	80 83       	st	Z, r24
	UCSR0B &= ~(1 << UCSZ02);
  ec:	e1 ec       	ldi	r30, 0xC1	; 193
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8b 7f       	andi	r24, 0xFB	; 251
  f4:	80 83       	st	Z, r24

	// Calculo del Baudrate
	UCSR0A |= (1 << U2X0);
  f6:	a0 ec       	ldi	r26, 0xC0	; 192
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	8c 91       	ld	r24, X
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	8c 93       	st	X, r24
	// --> Valor del registro UBRRn
	UBRR0 = (F_CPU / 8 / 9600) - 1;
 100:	8f ec       	ldi	r24, 0xCF	; 207
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 108:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Configuracion de pines RX & TX
	UCSR0B |= (1 << TXEN0);
 10c:	80 81       	ld	r24, Z
 10e:	88 60       	ori	r24, 0x08	; 8
 110:	80 83       	st	Z, r24
	UCSR0B |= (1 << RXEN0);
 112:	80 81       	ld	r24, Z
 114:	80 61       	ori	r24, 0x10	; 16
 116:	80 83       	st	Z, r24

	// Activamos interrupciones
	sei();
 118:	78 94       	sei

	/* Replace with your application code */
	while (1)
	{
		for (int i = 0; i < numeroBits; i++)
 11a:	20 e0       	ldi	r18, 0x00	; 0
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	0f c0       	rjmp	.+30     	; 0x13e <main+0xa8>
		{
			// Verificar si la transmicion esta libre
			while (!(UCSR0A & (1 << UDRE0)))
 120:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 124:	85 ff       	sbrs	r24, 5
 126:	fc cf       	rjmp	.-8      	; 0x120 <main+0x8a>
				;

			// USAR BUFFER
			UDR0 = datos[i];
 128:	e1 e0       	ldi	r30, 0x01	; 1
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	ec 0f       	add	r30, r28
 12e:	fd 1f       	adc	r31, r29
 130:	e2 0f       	add	r30, r18
 132:	f3 1f       	adc	r31, r19
 134:	80 81       	ld	r24, Z
 136:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	sei();

	/* Replace with your application code */
	while (1)
	{
		for (int i = 0; i < numeroBits; i++)
 13a:	2f 5f       	subi	r18, 0xFF	; 255
 13c:	3f 4f       	sbci	r19, 0xFF	; 255
 13e:	2c 30       	cpi	r18, 0x0C	; 12
 140:	31 05       	cpc	r19, r1
 142:	74 f3       	brlt	.-36     	; 0x120 <main+0x8a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	83 ed       	ldi	r24, 0xD3	; 211
 148:	90 e3       	ldi	r25, 0x30	; 48
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0xb4>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0xbe>
 154:	00 00       	nop
 156:	e1 cf       	rjmp	.-62     	; 0x11a <main+0x84>

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
