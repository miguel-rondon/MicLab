
lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000005fe  00000692  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080013c  0080013c  000006ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000740  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e1  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000077b  00000000  00000000  00001171  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000059f  00000000  00000000  000018ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004db  00000000  00000000  00001f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003be  00000000  00000000  0000241f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000027dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 bc 02 	jmp	0x578	; 0x578 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 db 02 	jmp	0x5b6	; 0x5b6 <__vector_23>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 34       	cpi	r26, 0x45	; 69
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  9e:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
char myBuffer = ' ';
int RESTA = 0;

void ADC_init()
{
	ADCSRA = 0x87; //ADC enable, prescaler 128
  a6:	87 e8       	ldi	r24, 0x87	; 135
  a8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADMUX = 0x40;  // Voltaje de referncia VCC, 1 <<REFS0
  ac:	80 e4       	ldi	r24, 0x40	; 64
  ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  b2:	08 95       	ret

000000b4 <ADC_read>:
}

int ADC_read(char channel)
{
	if (channel == 1)
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	21 f4       	brne	.+8      	; 0xc0 <ADC_read+0xc>
	{
		ADMUX = 0x41; //activado A1
  b8:	81 e4       	ldi	r24, 0x41	; 65
  ba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  be:	0b c0       	rjmp	.+22     	; 0xd6 <ADC_read+0x22>
	}
	else if (channel == 0)
  c0:	81 11       	cpse	r24, r1
  c2:	04 c0       	rjmp	.+8      	; 0xcc <ADC_read+0x18>
	{
		ADMUX = 0x40; //activado A0
  c4:	80 e4       	ldi	r24, 0x40	; 64
  c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  ca:	05 c0       	rjmp	.+10     	; 0xd6 <ADC_read+0x22>
	}
	else if (channel == 2)
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	19 f4       	brne	.+6      	; 0xd6 <ADC_read+0x22>
	{
		ADMUX = 0x42; //activado A2
  d0:	82 e4       	ldi	r24, 0x42	; 66
  d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	}

	// Inicia conversi贸n
	ADCSRA |= (1 << ADSC);
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24

	// Esperar hasta que termine la conversi贸n
	while (!(ADCSRA & (1 << ADIF)))
  e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e4:	84 ff       	sbrs	r24, 4
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <ADC_read+0x2c>
		;

	// Limpiar bandera interrupci贸n
	ADCSRA |= (1 << ADIF);
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 61       	ori	r24, 0x10	; 16
  f0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	8f e9       	ldi	r24, 0x9F	; 159
  f4:	9f e0       	ldi	r25, 0x0F	; 15
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <ADC_read+0x42>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <ADC_read+0x48>
  fc:	00 00       	nop

	// Esperar 1 milisegundo
	_delay_ms(1);

	return ADCW;
  fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 102:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 106:	08 95       	ret

00000108 <config_usart>:
	}
}

void config_usart(void)
{
	UCSR0A = 0x00;
 108:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = 0b10011000;
 10c:	88 e9       	ldi	r24, 0x98	; 152
 10e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = 0b00000110;
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

	UBRR0 = 103;
 118:	87 e6       	ldi	r24, 0x67	; 103
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 120:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 124:	08 95       	ret

00000126 <ANC_CONFG>:
}

void ANC_CONFG(void)
{
	// Se puede definir la entrada negativa del AC con MUX
	ADCSRB |= (0 << ACME);
 126:	eb e7       	ldi	r30, 0x7B	; 123
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 83       	st	Z, r24

	// Interrupcion AC activada, interrupci贸n en flanco de subida de la salida
	ACSR |= (1 << ACIE) | (0 << ACIS1) | (0 << ACIS0);
 12e:	80 b7       	in	r24, 0x30	; 48
 130:	88 60       	ori	r24, 0x08	; 8
 132:	80 bf       	out	0x30, r24	; 48

	// Buffer de entrada digital apagado en A3
	DIDR0 |= (1 << ADC3D);
 134:	ee e7       	ldi	r30, 0x7E	; 126
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	88 60       	ori	r24, 0x08	; 8
 13c:	80 83       	st	Z, r24

	// Buffer de entrada digital apagado en AIN0
	DIDR1 |= (1 << AIN0D);
 13e:	ef e7       	ldi	r30, 0x7F	; 127
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	81 60       	ori	r24, 0x01	; 1
 146:	80 83       	st	Z, r24
 148:	08 95       	ret

0000014a <main>:

	return ADCW;
}

int main(void)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	ce 55       	subi	r28, 0x5E	; 94
 154:	d1 09       	sbc	r29, r1
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	f8 94       	cli
 15a:	de bf       	out	0x3e, r29	; 62
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	cd bf       	out	0x3d, r28	; 61
	// Activamos RX/TX
	DDRD = 0x02;
 160:	82 e0       	ldi	r24, 0x02	; 2
 162:	8a b9       	out	0x0a, r24	; 10

	// Activamos los registros B como salidas
	DDRB = 0xFF;
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	84 b9       	out	0x04, r24	; 4

	// Iniciar metodo ADC
	ADC_init();
 168:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>

	// Iniciar comunicacion UART
	config_usart();
 16c:	0e 94 84 00 	call	0x108	; 0x108 <config_usart>

	ANC_CONFG();
 170:	0e 94 93 00 	call	0x126	; 0x126 <ANC_CONFG>

	// Activamos interrupciones
	sei();
 174:	78 94       	sei

	int cabeza[20] = {68, 65, 84, 79, 9, 83, 69, 78, 65, 76, 49, 9, 83, 69, 78, 65, 76, 50, 10, 13};
 176:	88 e2       	ldi	r24, 0x28	; 40
 178:	e1 e0       	ldi	r30, 0x01	; 1
 17a:	f1 e0       	ldi	r31, 0x01	; 1
 17c:	de 01       	movw	r26, r28
 17e:	11 96       	adiw	r26, 0x01	; 1
 180:	01 90       	ld	r0, Z+
 182:	0d 92       	st	X+, r0
 184:	8a 95       	dec	r24
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x36>

	for (int x = 0; x < 20; x++)
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	11 c0       	rjmp	.+34     	; 0x1b0 <main+0x66>
	{
		while (!(UCSR0A & (1 << UDRE0)))
 18e:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 192:	25 ff       	sbrs	r18, 5
 194:	fc cf       	rjmp	.-8      	; 0x18e <main+0x44>
			; // Wait for empty transmit buffer       */
		UDR0 = cabeza[x];
 196:	fc 01       	movw	r30, r24
 198:	ee 0f       	add	r30, r30
 19a:	ff 1f       	adc	r31, r31
 19c:	21 e0       	ldi	r18, 0x01	; 1
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	2c 0f       	add	r18, r28
 1a2:	3d 1f       	adc	r19, r29
 1a4:	e2 0f       	add	r30, r18
 1a6:	f3 1f       	adc	r31, r19
 1a8:	20 81       	ld	r18, Z
 1aa:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	// Activamos interrupciones
	sei();

	int cabeza[20] = {68, 65, 84, 79, 9, 83, 69, 78, 65, 76, 49, 9, 83, 69, 78, 65, 76, 50, 10, 13};

	for (int x = 0; x < 20; x++)
 1ae:	01 96       	adiw	r24, 0x01	; 1
 1b0:	84 31       	cpi	r24, 0x14	; 20
 1b2:	91 05       	cpc	r25, r1
 1b4:	64 f3       	brlt	.-40     	; 0x18e <main+0x44>
	/* Replace with your application code */
	while (1)

	{
		// Tomar Dato analogico de A0
		ADC_10bit_Result = ADC_read(0);
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_read>
 1bc:	fc 01       	movw	r30, r24
 1be:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <ADC_10bit_Result+0x1>
 1c2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <ADC_10bit_Result>
		uint8_t Hundreths_Position = 0;
		uint8_t Thousands_Position = 0;

		temp = ADC_10bit_Result;

		Ones_Position = temp % 10;		// Eg 1023 % 10  -> Remainder -> 3
 1c6:	9c 01       	movw	r18, r24
 1c8:	ad ec       	ldi	r26, 0xCD	; 205
 1ca:	bc ec       	ldi	r27, 0xCC	; 204
 1cc:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__umulhisi3>
 1d0:	6c 01       	movw	r12, r24
 1d2:	d6 94       	lsr	r13
 1d4:	c7 94       	ror	r12
 1d6:	d6 94       	lsr	r13
 1d8:	c7 94       	ror	r12
 1da:	d6 94       	lsr	r13
 1dc:	c7 94       	ror	r12
 1de:	c6 01       	movw	r24, r12
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	cc 0c       	add	r12, r12
 1e6:	dd 1c       	adc	r13, r13
 1e8:	cc 0c       	add	r12, r12
 1ea:	dd 1c       	adc	r13, r13
 1ec:	cc 0c       	add	r12, r12
 1ee:	dd 1c       	adc	r13, r13
 1f0:	c8 0e       	add	r12, r24
 1f2:	d9 1e       	adc	r13, r25
 1f4:	af 01       	movw	r20, r30
 1f6:	4c 19       	sub	r20, r12
 1f8:	5d 09       	sbc	r21, r13
 1fa:	6a 01       	movw	r12, r20
		temp = temp / 10;				// Eg temp = 1023/10 ->102
 1fc:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__umulhisi3>
 200:	ac 01       	movw	r20, r24
 202:	56 95       	lsr	r21
 204:	47 95       	ror	r20
 206:	56 95       	lsr	r21
 208:	47 95       	ror	r20
 20a:	56 95       	lsr	r21
 20c:	47 95       	ror	r20
		Tens_Position = temp % 10;		// Eg 102  % 10  -> Remainder -> 2
 20e:	9a 01       	movw	r18, r20
 210:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__umulhisi3>
 214:	8c 01       	movw	r16, r24
 216:	16 95       	lsr	r17
 218:	07 95       	ror	r16
 21a:	16 95       	lsr	r17
 21c:	07 95       	ror	r16
 21e:	16 95       	lsr	r17
 220:	07 95       	ror	r16
 222:	c8 01       	movw	r24, r16
 224:	88 0f       	add	r24, r24
 226:	99 1f       	adc	r25, r25
 228:	00 0f       	add	r16, r16
 22a:	11 1f       	adc	r17, r17
 22c:	00 0f       	add	r16, r16
 22e:	11 1f       	adc	r17, r17
 230:	00 0f       	add	r16, r16
 232:	11 1f       	adc	r17, r17
 234:	08 0f       	add	r16, r24
 236:	19 1f       	adc	r17, r25
 238:	ba 01       	movw	r22, r20
 23a:	60 1b       	sub	r22, r16
 23c:	71 0b       	sbc	r23, r17
 23e:	8b 01       	movw	r16, r22
		temp = temp / 10;				// Eg temp = 102/10 ->10
 240:	9f 01       	movw	r18, r30
 242:	36 95       	lsr	r19
 244:	27 95       	ror	r18
 246:	36 95       	lsr	r19
 248:	27 95       	ror	r18
 24a:	ab e7       	ldi	r26, 0x7B	; 123
 24c:	b4 e1       	ldi	r27, 0x14	; 20
 24e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__umulhisi3>
 252:	7c 01       	movw	r14, r24
 254:	f6 94       	lsr	r15
 256:	e7 94       	ror	r14
		Hundreths_Position = temp % 10; // Eg 10   % 10  -> Remainder -> 0
 258:	97 01       	movw	r18, r14
 25a:	ad ec       	ldi	r26, 0xCD	; 205
 25c:	bc ec       	ldi	r27, 0xCC	; 204
 25e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__umulhisi3>
 262:	ac 01       	movw	r20, r24
 264:	56 95       	lsr	r21
 266:	47 95       	ror	r20
 268:	56 95       	lsr	r21
 26a:	47 95       	ror	r20
 26c:	56 95       	lsr	r21
 26e:	47 95       	ror	r20
 270:	ca 01       	movw	r24, r20
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	44 0f       	add	r20, r20
 278:	55 1f       	adc	r21, r21
 27a:	44 0f       	add	r20, r20
 27c:	55 1f       	adc	r21, r21
 27e:	44 0f       	add	r20, r20
 280:	55 1f       	adc	r21, r21
 282:	48 0f       	add	r20, r24
 284:	59 1f       	adc	r21, r25
 286:	c7 01       	movw	r24, r14
 288:	84 1b       	sub	r24, r20
 28a:	95 0b       	sbc	r25, r21
 28c:	ac 01       	movw	r20, r24
		Thousands_Position = temp / 10; // Eg 10   / 10  -> Quotient  -> 1
 28e:	9f 01       	movw	r18, r30
 290:	36 95       	lsr	r19
 292:	27 95       	ror	r18
 294:	36 95       	lsr	r19
 296:	27 95       	ror	r18
 298:	36 95       	lsr	r19
 29a:	27 95       	ror	r18
 29c:	a5 ec       	ldi	r26, 0xC5	; 197
 29e:	b0 e2       	ldi	r27, 0x20	; 32
 2a0:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__umulhisi3>
 2a4:	92 95       	swap	r25
 2a6:	82 95       	swap	r24
 2a8:	8f 70       	andi	r24, 0x0F	; 15
 2aa:	89 27       	eor	r24, r25
 2ac:	9f 70       	andi	r25, 0x0F	; 15
 2ae:	89 27       	eor	r24, r25

		//ASCII Conversion
		Ones_Position += 0x30;
 2b0:	10 e3       	ldi	r17, 0x30	; 48
 2b2:	1c 0d       	add	r17, r12
		Tens_Position += 0x30;
 2b4:	00 5d       	subi	r16, 0xD0	; 208
		Hundreths_Position += 0x30;
 2b6:	0f 2e       	mov	r0, r31
 2b8:	f0 e3       	ldi	r31, 0x30	; 48
 2ba:	ff 2e       	mov	r15, r31
 2bc:	f0 2d       	mov	r31, r0
 2be:	f4 0e       	add	r15, r20
		Thousands_Position += 0x30;
 2c0:	0f 2e       	mov	r0, r31
 2c2:	f0 e3       	ldi	r31, 0x30	; 48
 2c4:	ef 2e       	mov	r14, r31
 2c6:	f0 2d       	mov	r31, r0
 2c8:	e8 0e       	add	r14, r24

		//REPETICION PARA EL SEGUNDO POTENCIOMETRO

		ADC_10bit_Result2 = ADC_read(1);
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_read>
 2d0:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <ADC_10bit_Result2+0x1>
 2d4:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <ADC_10bit_Result2>

		//PUNTO 3
		RESTA = ADC_10bit_Result - ADC_10bit_Result2;
 2d8:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <ADC_10bit_Result>
 2dc:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <ADC_10bit_Result+0x1>
 2e0:	a9 01       	movw	r20, r18
 2e2:	48 1b       	sub	r20, r24
 2e4:	59 0b       	sbc	r21, r25
 2e6:	ca 01       	movw	r24, r20
 2e8:	50 93 3d 01 	sts	0x013D, r21	; 0x80013d <__data_end+0x1>
 2ec:	40 93 3c 01 	sts	0x013C, r20	; 0x80013c <__data_end>
		if (RESTA > 0)
 2f0:	18 16       	cp	r1, r24
 2f2:	19 06       	cpc	r1, r25
 2f4:	1c f4       	brge	.+6      	; 0x2fc <main+0x1b2>
		{
			PORTB = (1 << 5);
 2f6:	80 e2       	ldi	r24, 0x20	; 32
 2f8:	85 b9       	out	0x05, r24	; 5
 2fa:	01 c0       	rjmp	.+2      	; 0x2fe <main+0x1b4>
		}
		else
		{
			PORTB = (0 << 5);
 2fc:	15 b8       	out	0x05, r1	; 5
		uint8_t Ones_Position2 = 0; // 8 bit variables to be send using usart
		uint8_t Tens_Position2 = 0;
		uint8_t Hundreths_Position2 = 0;
		uint8_t Thousands_Position2 = 0;

		temp2 = ADC_10bit_Result2;
 2fe:	a0 90 41 01 	lds	r10, 0x0141	; 0x800141 <ADC_10bit_Result2>
 302:	b0 90 42 01 	lds	r11, 0x0142	; 0x800142 <ADC_10bit_Result2+0x1>

		Ones_Position2 = temp2 % 10;	  // Eg 1023 % 10  -> Remainder -> 3
 306:	95 01       	movw	r18, r10
 308:	ad ec       	ldi	r26, 0xCD	; 205
 30a:	bc ec       	ldi	r27, 0xCC	; 204
 30c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__umulhisi3>
 310:	6c 01       	movw	r12, r24
 312:	d6 94       	lsr	r13
 314:	c7 94       	ror	r12
 316:	d6 94       	lsr	r13
 318:	c7 94       	ror	r12
 31a:	d6 94       	lsr	r13
 31c:	c7 94       	ror	r12
 31e:	c6 01       	movw	r24, r12
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	cc 0c       	add	r12, r12
 326:	dd 1c       	adc	r13, r13
 328:	cc 0c       	add	r12, r12
 32a:	dd 1c       	adc	r13, r13
 32c:	cc 0c       	add	r12, r12
 32e:	dd 1c       	adc	r13, r13
 330:	c8 0e       	add	r12, r24
 332:	d9 1e       	adc	r13, r25
 334:	b5 01       	movw	r22, r10
 336:	6c 19       	sub	r22, r12
 338:	7d 09       	sbc	r23, r13
 33a:	6b 01       	movw	r12, r22
		temp2 = temp2 / 10;				  // Eg temp = 1023/10 ->102
 33c:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__umulhisi3>
 340:	ac 01       	movw	r20, r24
 342:	56 95       	lsr	r21
 344:	47 95       	ror	r20
 346:	56 95       	lsr	r21
 348:	47 95       	ror	r20
 34a:	56 95       	lsr	r21
 34c:	47 95       	ror	r20
		Tens_Position2 = temp2 % 10;	  // Eg 102  % 10  -> Remainder -> 2
 34e:	9a 01       	movw	r18, r20
 350:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__umulhisi3>
 354:	fc 01       	movw	r30, r24
 356:	f6 95       	lsr	r31
 358:	e7 95       	ror	r30
 35a:	f6 95       	lsr	r31
 35c:	e7 95       	ror	r30
 35e:	f6 95       	lsr	r31
 360:	e7 95       	ror	r30
 362:	cf 01       	movw	r24, r30
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	ee 0f       	add	r30, r30
 36a:	ff 1f       	adc	r31, r31
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	ee 0f       	add	r30, r30
 372:	ff 1f       	adc	r31, r31
 374:	e8 0f       	add	r30, r24
 376:	f9 1f       	adc	r31, r25
 378:	ca 01       	movw	r24, r20
 37a:	8e 1b       	sub	r24, r30
 37c:	9f 0b       	sbc	r25, r31
 37e:	fc 01       	movw	r30, r24
		temp2 = temp2 / 10;				  // Eg temp = 102/10 ->10
 380:	95 01       	movw	r18, r10
 382:	36 95       	lsr	r19
 384:	27 95       	ror	r18
 386:	36 95       	lsr	r19
 388:	27 95       	ror	r18
 38a:	ab e7       	ldi	r26, 0x7B	; 123
 38c:	b4 e1       	ldi	r27, 0x14	; 20
 38e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__umulhisi3>
 392:	4c 01       	movw	r8, r24
 394:	96 94       	lsr	r9
 396:	87 94       	ror	r8
		Hundreths_Position2 = temp2 % 10; // Eg 10   % 10  -> Remainder -> 0
 398:	94 01       	movw	r18, r8
 39a:	ad ec       	ldi	r26, 0xCD	; 205
 39c:	bc ec       	ldi	r27, 0xCC	; 204
 39e:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__umulhisi3>
 3a2:	ac 01       	movw	r20, r24
 3a4:	56 95       	lsr	r21
 3a6:	47 95       	ror	r20
 3a8:	56 95       	lsr	r21
 3aa:	47 95       	ror	r20
 3ac:	56 95       	lsr	r21
 3ae:	47 95       	ror	r20
 3b0:	ca 01       	movw	r24, r20
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	44 0f       	add	r20, r20
 3b8:	55 1f       	adc	r21, r21
 3ba:	44 0f       	add	r20, r20
 3bc:	55 1f       	adc	r21, r21
 3be:	44 0f       	add	r20, r20
 3c0:	55 1f       	adc	r21, r21
 3c2:	48 0f       	add	r20, r24
 3c4:	59 1f       	adc	r21, r25
 3c6:	24 1b       	sub	r18, r20
 3c8:	35 0b       	sbc	r19, r21
 3ca:	a9 01       	movw	r20, r18
		Thousands_Position2 = temp2 / 10; // Eg 10   / 10  -> Quotient  -> 1
 3cc:	95 01       	movw	r18, r10
 3ce:	36 95       	lsr	r19
 3d0:	27 95       	ror	r18
 3d2:	36 95       	lsr	r19
 3d4:	27 95       	ror	r18
 3d6:	36 95       	lsr	r19
 3d8:	27 95       	ror	r18
 3da:	a5 ec       	ldi	r26, 0xC5	; 197
 3dc:	b0 e2       	ldi	r27, 0x20	; 32
 3de:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__umulhisi3>
 3e2:	92 95       	swap	r25
 3e4:	82 95       	swap	r24
 3e6:	8f 70       	andi	r24, 0x0F	; 15
 3e8:	89 27       	eor	r24, r25
 3ea:	9f 70       	andi	r25, 0x0F	; 15
 3ec:	89 27       	eor	r24, r25

		//ASCII Conversion
		Ones_Position2 += 0x30;
 3ee:	30 e3       	ldi	r19, 0x30	; 48
 3f0:	3c 0d       	add	r19, r12
		Tens_Position2 += 0x30;
 3f2:	20 e3       	ldi	r18, 0x30	; 48
 3f4:	2e 0f       	add	r18, r30
		Hundreths_Position2 += 0x30;
 3f6:	40 5d       	subi	r20, 0xD0	; 208
		Thousands_Position2 += 0x30;
 3f8:	80 5d       	subi	r24, 0xD0	; 208

		// Numeros del 0 al 9 en ASCII
		int a[9] = {48, 49, 50, 51, 52, 53, 54, 56, 57};
 3fa:	92 e1       	ldi	r25, 0x12	; 18
 3fc:	e9 e2       	ldi	r30, 0x29	; 41
 3fe:	f1 e0       	ldi	r31, 0x01	; 1
 400:	de 01       	movw	r26, r28
 402:	a3 5b       	subi	r26, 0xB3	; 179
 404:	bf 4f       	sbci	r27, 0xFF	; 255
 406:	01 90       	ld	r0, Z+
 408:	0d 92       	st	X+, r0
 40a:	9a 95       	dec	r25
 40c:	e1 f7       	brne	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		int b[9] = {48, 49, 50, 51, 52, 53, 54, 56, 57};
 40e:	92 e1       	ldi	r25, 0x12	; 18
 410:	e9 e2       	ldi	r30, 0x29	; 41
 412:	f1 e0       	ldi	r31, 0x01	; 1
 414:	de 01       	movw	r26, r28
 416:	db 96       	adiw	r26, 0x3b	; 59
 418:	01 90       	ld	r0, Z+
 41a:	0d 92       	st	X+, r0
 41c:	9a 95       	dec	r25
 41e:	e1 f7       	brne	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
		int c[9] = {48, 49, 50, 51, 52, 53, 54, 56, 57};
 420:	92 e1       	ldi	r25, 0x12	; 18
 422:	e9 e2       	ldi	r30, 0x29	; 41
 424:	f1 e0       	ldi	r31, 0x01	; 1
 426:	de 01       	movw	r26, r28
 428:	99 96       	adiw	r26, 0x29	; 41
 42a:	01 90       	ld	r0, Z+
 42c:	0d 92       	st	X+, r0
 42e:	9a 95       	dec	r25
 430:	e1 f7       	brne	.-8      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>

		while (!(UCSR0A & (1 << UDRE0)))
 432:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 436:	95 ff       	sbrs	r25, 5
 438:	fc cf       	rjmp	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
			;			   // Wait for empty transmit buffer       */
		UDR0 = c[cnumero]; // Put data into buffer, sends the data */
 43a:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <cnumero>
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	ee 0f       	add	r30, r30
 442:	ff 1f       	adc	r31, r31
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	6c 0f       	add	r22, r28
 44a:	7d 1f       	adc	r23, r29
 44c:	e6 0f       	add	r30, r22
 44e:	f7 1f       	adc	r31, r23
 450:	90 a5       	ldd	r25, Z+40	; 0x28
 452:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 456:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 45a:	95 ff       	sbrs	r25, 5
 45c:	fc cf       	rjmp	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			;			   // Wait for empty transmit buffer       */
		UDR0 = a[dnumero]; // Put data into buffer, sends the data */
 45e:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <dnumero>
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	ee 0f       	add	r30, r30
 466:	ff 1f       	adc	r31, r31
 468:	6d e4       	ldi	r22, 0x4D	; 77
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	6c 0f       	add	r22, r28
 46e:	7d 1f       	adc	r23, r29
 470:	e6 0f       	add	r30, r22
 472:	f7 1f       	adc	r31, r23
 474:	90 81       	ld	r25, Z
 476:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 47a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 47e:	95 ff       	sbrs	r25, 5
 480:	fc cf       	rjmp	.-8      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			;			  // Wait for empty transmit buffer       */
		UDR0 = b[numero]; // Put data into buffer, sends the data */
 482:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <numero>
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	ee 0f       	add	r30, r30
 48a:	ff 1f       	adc	r31, r31
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	70 e0       	ldi	r23, 0x00	; 0
 490:	6c 0f       	add	r22, r28
 492:	7d 1f       	adc	r23, r29
 494:	e6 0f       	add	r30, r22
 496:	f7 1f       	adc	r31, r23
 498:	92 ad       	ldd	r25, Z+58	; 0x3a
 49a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 49e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4a2:	95 ff       	sbrs	r25, 5
 4a4:	fc cf       	rjmp	.-8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			; // Wait for empty transmit buffer       */
		UDR0 = '	';
 4a6:	99 e0       	ldi	r25, 0x09	; 9
 4a8:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 4ac:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4b0:	95 ff       	sbrs	r25, 5
 4b2:	fc cf       	rjmp	.-8      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
			;					   // Wait for empty transmit buffer       */
		UDR0 = Thousands_Position; // Put data into buffer, sends the data */
 4b4:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 4b8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4bc:	95 ff       	sbrs	r25, 5
 4be:	fc cf       	rjmp	.-8      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
			;					   // Wait for empty transmit buffer       */
		UDR0 = Hundreths_Position; // Put data into buffer, sends the data */
 4c0:	f0 92 c6 00 	sts	0x00C6, r15	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 4c4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4c8:	95 ff       	sbrs	r25, 5
 4ca:	fc cf       	rjmp	.-8      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
			;				  // Wait for empty transmit buffer       */
		UDR0 = Tens_Position; // Put data into buffer, sends the data */
 4cc:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 4d0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4d4:	95 ff       	sbrs	r25, 5
 4d6:	fc cf       	rjmp	.-8      	; 0x4d0 <__EEPROM_REGION_LENGTH__+0xd0>
			;				  // Wait for empty transmit buffer       */
		UDR0 = Ones_Position; // Put data into buffer, sends the data */
 4d8:	10 93 c6 00 	sts	0x00C6, r17	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		// Send '-' Character //
		while (!(UCSR0A & (1 << UDRE0)))
 4dc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4e0:	95 ff       	sbrs	r25, 5
 4e2:	fc cf       	rjmp	.-8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
			; // Wait for empty transmit buffer       */
		UDR0 = '	';
 4e4:	99 e0       	ldi	r25, 0x09	; 9
 4e6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 4ea:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4ee:	95 ff       	sbrs	r25, 5
 4f0:	fc cf       	rjmp	.-8      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
			;						// Wait for empty transmit buffer       */
		UDR0 = Thousands_Position2; // Put data into buffer, sends the data */
 4f2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 4f6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4fa:	95 ff       	sbrs	r25, 5
 4fc:	fc cf       	rjmp	.-8      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
			;						// Wait for empty transmit buffer       */
		UDR0 = Hundreths_Position2; // Put data into buffer, sends the data */
 4fe:	40 93 c6 00 	sts	0x00C6, r20	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 502:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 506:	95 ff       	sbrs	r25, 5
 508:	fc cf       	rjmp	.-8      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
			;				   // Wait for empty transmit buffer       */
		UDR0 = Tens_Position2; // Put data into buffer, sends the data */
 50a:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 50e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 512:	95 ff       	sbrs	r25, 5
 514:	fc cf       	rjmp	.-8      	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
			;				   // Wait for empty transmit buffer       */
		UDR0 = Ones_Position2; // Put data into buffer, sends the data */
 516:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 51a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 51e:	85 ff       	sbrs	r24, 5
 520:	fc cf       	rjmp	.-8      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
			;	   // Wait for empty transmit buffer       */
		UDR0 = 10; // Put data into buffer, sends the data */
 522:	8a e0       	ldi	r24, 0x0A	; 10
 524:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 528:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 52c:	85 ff       	sbrs	r24, 5
 52e:	fc cf       	rjmp	.-8      	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
			;	   // Wait for empty transmit buffer       */
		UDR0 = 13; // Put data into buffer, sends the data */
 530:	8d e0       	ldi	r24, 0x0D	; 13
 532:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		numero++;
 536:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <numero>
 53a:	8f 5f       	subi	r24, 0xFF	; 255
 53c:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <numero>
		if (numero == 9)
 540:	89 30       	cpi	r24, 0x09	; 9
 542:	81 f4       	brne	.+32     	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
		{
			dnumero++;
 544:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <dnumero>
 548:	8f 5f       	subi	r24, 0xFF	; 255
 54a:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <dnumero>
			numero = 0;
 54e:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <numero>
			if (dnumero == 9)
 552:	89 30       	cpi	r24, 0x09	; 9
 554:	39 f4       	brne	.+14     	; 0x564 <__EEPROM_REGION_LENGTH__+0x164>
			{
				cnumero++;
 556:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <cnumero>
 55a:	8f 5f       	subi	r24, 0xFF	; 255
 55c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <cnumero>
				dnumero = 0;
 560:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <dnumero>
 564:	7f ef       	ldi	r23, 0xFF	; 255
 566:	89 e6       	ldi	r24, 0x69	; 105
 568:	98 e1       	ldi	r25, 0x18	; 24
 56a:	71 50       	subi	r23, 0x01	; 1
 56c:	80 40       	sbci	r24, 0x00	; 0
 56e:	90 40       	sbci	r25, 0x00	; 0
 570:	e1 f7       	brne	.-8      	; 0x56a <__EEPROM_REGION_LENGTH__+0x16a>
 572:	00 c0       	rjmp	.+0      	; 0x574 <__EEPROM_REGION_LENGTH__+0x174>
 574:	00 00       	nop
			}
		}
		_delay_ms(500);
	}
 576:	1f ce       	rjmp	.-962    	; 0x1b6 <main+0x6c>

00000578 <__vector_18>:
	// Buffer de entrada digital apagado en AIN0
	DIDR1 |= (1 << AIN0D);
}

ISR(USART_RX_vect)
{
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	8f 93       	push	r24
 584:	9f 93       	push	r25
	// Almacenamos dato actual
	myBuffer = UDR0;
 586:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 58a:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>

	// Verificar si la transmicion esta libre
	while (!(UCSR0A & (1 << UDRE0)))
 58e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 592:	85 ff       	sbrs	r24, 5
 594:	fc cf       	rjmp	.-8      	; 0x58e <__vector_18+0x16>
		;

	// Mensaje de confirmacion dependiente del puerto
	if (myBuffer == 'D')
 596:	94 34       	cpi	r25, 0x44	; 68
 598:	29 f4       	brne	.+10     	; 0x5a4 <__vector_18+0x2c>
	{
		// Encender/Apagar led, pin 12
		PORTB ^= (1 << 4);
 59a:	95 b1       	in	r25, 0x05	; 5
 59c:	80 e1       	ldi	r24, 0x10	; 16
 59e:	89 27       	eor	r24, r25
 5a0:	85 b9       	out	0x05, r24	; 5
 5a2:	02 c0       	rjmp	.+4      	; 0x5a8 <__vector_18+0x30>
	}
	else
	{
		// Escribir registro almacenado
		UDR0 = myBuffer;
 5a4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
}
 5a8:	9f 91       	pop	r25
 5aa:	8f 91       	pop	r24
 5ac:	0f 90       	pop	r0
 5ae:	0f be       	out	0x3f, r0	; 63
 5b0:	0f 90       	pop	r0
 5b2:	1f 90       	pop	r1
 5b4:	18 95       	reti

000005b6 <__vector_23>:

ISR(ANALOG_COMP_vect)
{
 5b6:	1f 92       	push	r1
 5b8:	0f 92       	push	r0
 5ba:	0f b6       	in	r0, 0x3f	; 63
 5bc:	0f 92       	push	r0
 5be:	11 24       	eor	r1, r1
 5c0:	8f 93       	push	r24
	// Verificar ACO (bit de salida)
	if ((ACSR & 0x20) == 0)
 5c2:	00 b6       	in	r0, 0x30	; 48
 5c4:	05 fc       	sbrc	r0, 5
 5c6:	03 c0       	rjmp	.+6      	; 0x5ce <__vector_23+0x18>
	{
		// Enciende led si Ref es mayor, pin 11
		PORTB = (1 << 3);
 5c8:	88 e0       	ldi	r24, 0x08	; 8
 5ca:	85 b9       	out	0x05, r24	; 5
 5cc:	01 c0       	rjmp	.+2      	; 0x5d0 <__vector_23+0x1a>
	}
	else
	{
		// Apaga led, pin 11
		PORTB = (0 << 3);
 5ce:	15 b8       	out	0x05, r1	; 5
	}
 5d0:	8f 91       	pop	r24
 5d2:	0f 90       	pop	r0
 5d4:	0f be       	out	0x3f, r0	; 63
 5d6:	0f 90       	pop	r0
 5d8:	1f 90       	pop	r1
 5da:	18 95       	reti

000005dc <__umulhisi3>:
 5dc:	a2 9f       	mul	r26, r18
 5de:	b0 01       	movw	r22, r0
 5e0:	b3 9f       	mul	r27, r19
 5e2:	c0 01       	movw	r24, r0
 5e4:	a3 9f       	mul	r26, r19
 5e6:	70 0d       	add	r23, r0
 5e8:	81 1d       	adc	r24, r1
 5ea:	11 24       	eor	r1, r1
 5ec:	91 1d       	adc	r25, r1
 5ee:	b2 9f       	mul	r27, r18
 5f0:	70 0d       	add	r23, r0
 5f2:	81 1d       	adc	r24, r1
 5f4:	11 24       	eor	r1, r1
 5f6:	91 1d       	adc	r25, r1
 5f8:	08 95       	ret

000005fa <_exit>:
 5fa:	f8 94       	cli

000005fc <__stop_program>:
 5fc:	ff cf       	rjmp	.-2      	; 0x5fc <__stop_program>
