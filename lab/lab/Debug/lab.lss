
lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000180  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077f  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b5  00000000  00000000  00000a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fd  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000005c  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e9  00000000  00000000  000017d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000018c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_18>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
char myBuffer = ' ';

int main(void)
{
	// Apagar todas las interrupciones con <avr/interrupt.h>
	cli();
  96:	f8 94       	cli

	// Modo de uso tipo asyncrono UMLSEL0 -> 00
	UCSR0C &= ~(1 << UMSEL00);
  98:	e2 ec       	ldi	r30, 0xC2	; 194
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	8f 7b       	andi	r24, 0xBF	; 191
  a0:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UMSEL01);
  a2:	80 81       	ld	r24, Z
  a4:	8f 77       	andi	r24, 0x7F	; 127
  a6:	80 83       	st	Z, r24

	// Desactivar paridad UPM0 -> 01
	UCSR0C &= ~(1 << UPM00);
  a8:	80 81       	ld	r24, Z
  aa:	8f 7e       	andi	r24, 0xEF	; 239
  ac:	80 83       	st	Z, r24
	UCSR0C &= ~(1 << UPM01);
  ae:	80 81       	ld	r24, Z
  b0:	8f 7d       	andi	r24, 0xDF	; 223
  b2:	80 83       	st	Z, r24

	// Parada con un bit USB -> 0 y si tiene 1 entonces define 2bit de parada
	UCSR0C &= ~(1 << USBS0);
  b4:	80 81       	ld	r24, Z
  b6:	87 7f       	andi	r24, 0xF7	; 247
  b8:	80 83       	st	Z, r24

	// Definir tamaï¿½o de datos a 8bits
	UCSR0C |= (1 << UCSZ00);  // 1
  ba:	80 81       	ld	r24, Z
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01);  // 1
  c0:	80 81       	ld	r24, Z
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	80 83       	st	Z, r24
	UCSR0B &= ~(1 << UCSZ02); // 0
  c6:	e1 ec       	ldi	r30, 0xC1	; 193
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	80 83       	st	Z, r24

	// Calculo del Baudrate
	UCSR0A |= (1 << U2X0);
  d0:	a0 ec       	ldi	r26, 0xC0	; 192
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	8c 91       	ld	r24, X
  d6:	82 60       	ori	r24, 0x02	; 2
  d8:	8c 93       	st	X, r24
	// --> Valor del registro UBRRn
	UBRR0 = (F_CPU / 8 / 9600) - 1;
  da:	8f ec       	ldi	r24, 0xCF	; 207
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Configuracion de pines RX & TX
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);
  e6:	80 81       	ld	r24, Z
  e8:	88 61       	ori	r24, 0x18	; 24
  ea:	80 83       	st	Z, r24

	// Activamos la interrupcion
	UCSR0B |= (1 << RXCIE0);
  ec:	80 81       	ld	r24, Z
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	80 83       	st	Z, r24

	// Activamos interrupciones
	sei();
  f2:	78 94       	sei
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <main+0x5e>

000000f6 <__vector_18>:
	{
	}
}

ISR(USART_RX_vect)
{
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	3f 93       	push	r19
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	ef 93       	push	r30
 10a:	ff 93       	push	r31
	myBuffer = UDR0;
 10c:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 110:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>

	// Verificar si la transmicion esta libre
	while (!(UCSR0A & (1 << UDRE0)))
 114:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 118:	85 ff       	sbrs	r24, 5
 11a:	fc cf       	rjmp	.-8      	; 0x114 <__vector_18+0x1e>
		;

	// Encender led
	if (myBuffer == 'D')
 11c:	94 34       	cpi	r25, 0x44	; 68
 11e:	f9 f4       	brne	.+62     	; 0x15e <__vector_18+0x68>
	{
		PORTB^= (1 << 4);
 120:	95 b1       	in	r25, 0x05	; 5
 122:	80 e1       	ldi	r24, 0x10	; 16
 124:	89 27       	eor	r24, r25
 126:	85 b9       	out	0x05, r24	; 5
		
		for (int i = 0; i < numeroBits; i++)
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	0c c0       	rjmp	.+24     	; 0x146 <__vector_18+0x50>
		{
			// Verificar si la transmicion esta libre
			while (!(UCSR0A & (1 << UDRE0)))
 12e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 132:	85 ff       	sbrs	r24, 5
 134:	fc cf       	rjmp	.-8      	; 0x12e <__vector_18+0x38>
			;

			// USAR BUFFER
			UDR0 = datos[i];
 136:	f9 01       	movw	r30, r18
 138:	ef 5f       	subi	r30, 0xFF	; 255
 13a:	fe 4f       	sbci	r31, 0xFE	; 254
 13c:	80 81       	ld	r24, Z
 13e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	// Encender led
	if (myBuffer == 'D')
	{
		PORTB^= (1 << 4);
		
		for (int i = 0; i < numeroBits; i++)
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	3f 4f       	sbci	r19, 0xFF	; 255
 146:	2e 30       	cpi	r18, 0x0E	; 14
 148:	31 05       	cpc	r19, r1
 14a:	8c f3       	brlt	.-30     	; 0x12e <__vector_18+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	83 ed       	ldi	r24, 0xD3	; 211
 150:	90 e3       	ldi	r25, 0x30	; 48
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <__vector_18+0x5c>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <__vector_18+0x66>
 15c:	00 00       	nop
		}
		
		_delay_ms(1000);
	}
	
	UDR0 = myBuffer;
 15e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 162:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 166:	ff 91       	pop	r31
 168:	ef 91       	pop	r30
 16a:	9f 91       	pop	r25
 16c:	8f 91       	pop	r24
 16e:	3f 91       	pop	r19
 170:	2f 91       	pop	r18
 172:	0f 90       	pop	r0
 174:	0f be       	out	0x3f, r0	; 63
 176:	0f 90       	pop	r0
 178:	1f 90       	pop	r1
 17a:	18 95       	reti

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
