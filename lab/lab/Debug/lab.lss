
lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  000005e8  0000067c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  0080013c  0080013c  000006b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009be  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000793  00000000  00000000  00001136  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000595  00000000  00000000  000018c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00001e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a5  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003bd  00000000  00000000  000023bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000277a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__vector_23>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 34       	cpi	r26, 0x45	; 69
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a0 00 	call	0x140	; 0x140 <main>
  9e:	0c 94 f2 02 	jmp	0x5e4	; 0x5e4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:

// Configurar el ADC
void ADC_init()
{
	// ADC habilitado, con prescaler 128
	ADCSRA = 0x87;
  a6:	87 e8       	ldi	r24, 0x87	; 135
  a8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	// Voltaje de referencia VCC, 1 <<REFS0 (Alimentación AVCC)
	ADMUX = 0x40; // 0b100 0000 para 10B
  ac:	80 e4       	ldi	r24, 0x40	; 64
  ae:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  b2:	08 95       	ret

000000b4 <ADC_read>:
}

// Funcion de lectura ADC con selector de canales
int ADC_read(char channel)
{
	if (channel == 1)
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	21 f4       	brne	.+8      	; 0xc0 <ADC_read+0xc>
	{
		// Activado A1
		ADMUX = 0x41;
  b8:	81 e4       	ldi	r24, 0x41	; 65
  ba:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  be:	0b c0       	rjmp	.+22     	; 0xd6 <ADC_read+0x22>
	}
	else if (channel == 0)
  c0:	81 11       	cpse	r24, r1
  c2:	04 c0       	rjmp	.+8      	; 0xcc <ADC_read+0x18>
	{
		// Activado A0
		ADMUX = 0x40;
  c4:	80 e4       	ldi	r24, 0x40	; 64
  c6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  ca:	05 c0       	rjmp	.+10     	; 0xd6 <ADC_read+0x22>
	}
	else if (channel == 2)
  cc:	82 30       	cpi	r24, 0x02	; 2
  ce:	19 f4       	brne	.+6      	; 0xd6 <ADC_read+0x22>
	{
		// Activado A2
		ADMUX = 0x42;
  d0:	82 e4       	ldi	r24, 0x42	; 66
  d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	}

	// Inicia conversión
	ADCSRA |= (1 << ADSC);
  d6:	ea e7       	ldi	r30, 0x7A	; 122
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	80 83       	st	Z, r24

	//Esperar hasta que termine la conversión
	while (!(ADCSRA & (1 << ADIF)))
  e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e4:	84 ff       	sbrs	r24, 4
  e6:	fc cf       	rjmp	.-8      	; 0xe0 <ADC_read+0x2c>
		;

	//limpiar bandera interrupción
	ADCSRA |= (1 << ADIF);
  e8:	ea e7       	ldi	r30, 0x7A	; 122
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 61       	ori	r24, 0x10	; 16
  f0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f2:	8f e9       	ldi	r24, 0x9F	; 159
  f4:	9f e0       	ldi	r25, 0x0F	; 15
  f6:	01 97       	sbiw	r24, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <ADC_read+0x42>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <ADC_read+0x48>
  fc:	00 00       	nop
	_delay_ms(1);

	//retornar converción
	return ADCW;
  fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 102:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 106:	08 95       	ret

00000108 <config_usart>:
}

// Configuracion de puertos para 9600b tipo UART Asincrona Normal con RX & TX
void config_usart(void)
{
	UCSR0A = 0x00;
 108:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = 0b10011000;
 10c:	88 e9       	ldi	r24, 0x98	; 152
 10e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = 0b00000110;
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

	// Configurar el baud
	UBRR0 = 103;
 118:	87 e6       	ldi	r24, 0x67	; 103
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 120:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 124:	08 95       	ret

00000126 <ANC_CONFG>:

// Configuracion de comparador analogico
void ANC_CONFG(void)
{
	// Se puede definir la entrada negativa del AC con MUX
	ADCSRB |= (0 << ACME);
 126:	eb e7       	ldi	r30, 0x7B	; 123
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 83       	st	Z, r24

	// Interrupcion AC activada, interrupción en flanco de subida de la salida
	ACSR |= (1 << ACIE) | (0 << ACIS1) | (0 << ACIS0);
 12e:	80 b7       	in	r24, 0x30	; 48
 130:	88 60       	ori	r24, 0x08	; 8
 132:	80 bf       	out	0x30, r24	; 48

	// Buffer de entrada digital apagado en AIN0 & AIN1
	DIDR1 |= (1 << AIN0D) | (1 << AIN1D);
 134:	ef e7       	ldi	r30, 0x7F	; 127
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	83 60       	ori	r24, 0x03	; 3
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <main>:
	//retornar converción
	return ADCW;
}

int main(void)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	cd b7       	in	r28, 0x3d	; 61
 146:	de b7       	in	r29, 0x3e	; 62
 148:	ce 55       	subi	r28, 0x5E	; 94
 14a:	d1 09       	sbc	r29, r1
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
	// Activar las interrupciones globales
	sei();
 156:	78 94       	sei

	// Configurar puerto RX/TX
	DDRD = 0x02;
 158:	82 e0       	ldi	r24, 0x02	; 2
 15a:	8a b9       	out	0x0a, r24	; 10

	// Configurar puertos de salidas
	DDRB = 0xFF;
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	84 b9       	out	0x04, r24	; 4

	// Llamar métodos
	ADC_init();
 160:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
	ANC_CONFG();
 164:	0e 94 93 00 	call	0x126	; 0x126 <ANC_CONFG>

	config_usart();
 168:	0e 94 84 00 	call	0x108	; 0x108 <config_usart>

	// Encabezado de datos [Dato	Signal1		Signal2]
	int cabeza[20] = {68, 65, 84, 79, 9, 83, 69, 78, 65, 76, 49, 9, 83, 69, 78, 65, 76, 50, 10, 13};
 16c:	88 e2       	ldi	r24, 0x28	; 40
 16e:	e1 e0       	ldi	r30, 0x01	; 1
 170:	f1 e0       	ldi	r31, 0x01	; 1
 172:	de 01       	movw	r26, r28
 174:	11 96       	adiw	r26, 0x01	; 1
 176:	01 90       	ld	r0, Z+
 178:	0d 92       	st	X+, r0
 17a:	8a 95       	dec	r24
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x36>

	// Enviar encabezados
	for (int x = 0; x < 20; x++)
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	11 c0       	rjmp	.+34     	; 0x1a6 <main+0x66>
	{
		// Verificar si la transmicion esta libre
		while (!(UCSR0A & (1 << UDRE0)))
 184:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 188:	25 ff       	sbrs	r18, 5
 18a:	fc cf       	rjmp	.-8      	; 0x184 <main+0x44>
			;

		// Escribir registro almacenado
		UDR0 = cabeza[x];
 18c:	fc 01       	movw	r30, r24
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	2c 0f       	add	r18, r28
 198:	3d 1f       	adc	r19, r29
 19a:	e2 0f       	add	r30, r18
 19c:	f3 1f       	adc	r31, r19
 19e:	20 81       	ld	r18, Z
 1a0:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	// Encabezado de datos [Dato	Signal1		Signal2]
	int cabeza[20] = {68, 65, 84, 79, 9, 83, 69, 78, 65, 76, 49, 9, 83, 69, 78, 65, 76, 50, 10, 13};

	// Enviar encabezados
	for (int x = 0; x < 20; x++)
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	84 31       	cpi	r24, 0x14	; 20
 1a8:	91 05       	cpc	r25, r1
 1aa:	64 f3       	brlt	.-40     	; 0x184 <main+0x44>
	}

	while (1)
	{
		// Obtener datos de A0
		signal_1 = ADC_read(0);
 1ac:	80 e0       	ldi	r24, 0x00	; 0
 1ae:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_read>
 1b2:	fc 01       	movw	r30, r24
 1b4:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <signal_1+0x1>
 1b8:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <signal_1>
		uint8_t Thousands_Position = 0;

		// Almacenamos la señal 1
		temp = signal_1;

		Ones_Position = temp % 10;		// Eg 1023 % 10  -> Remainder -> 3
 1bc:	9c 01       	movw	r18, r24
 1be:	ad ec       	ldi	r26, 0xCD	; 205
 1c0:	bc ec       	ldi	r27, 0xCC	; 204
 1c2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__umulhisi3>
 1c6:	6c 01       	movw	r12, r24
 1c8:	d6 94       	lsr	r13
 1ca:	c7 94       	ror	r12
 1cc:	d6 94       	lsr	r13
 1ce:	c7 94       	ror	r12
 1d0:	d6 94       	lsr	r13
 1d2:	c7 94       	ror	r12
 1d4:	c6 01       	movw	r24, r12
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	cc 0c       	add	r12, r12
 1dc:	dd 1c       	adc	r13, r13
 1de:	cc 0c       	add	r12, r12
 1e0:	dd 1c       	adc	r13, r13
 1e2:	cc 0c       	add	r12, r12
 1e4:	dd 1c       	adc	r13, r13
 1e6:	c8 0e       	add	r12, r24
 1e8:	d9 1e       	adc	r13, r25
 1ea:	bf 01       	movw	r22, r30
 1ec:	6c 19       	sub	r22, r12
 1ee:	7d 09       	sbc	r23, r13
 1f0:	6b 01       	movw	r12, r22
		temp = temp / 10;				// Eg temp = 1023/10 ->102
 1f2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__umulhisi3>
 1f6:	ac 01       	movw	r20, r24
 1f8:	56 95       	lsr	r21
 1fa:	47 95       	ror	r20
 1fc:	56 95       	lsr	r21
 1fe:	47 95       	ror	r20
 200:	56 95       	lsr	r21
 202:	47 95       	ror	r20
		Tens_Position = temp % 10;		// Eg 102  % 10  -> Remainder -> 2
 204:	9a 01       	movw	r18, r20
 206:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__umulhisi3>
 20a:	8c 01       	movw	r16, r24
 20c:	16 95       	lsr	r17
 20e:	07 95       	ror	r16
 210:	16 95       	lsr	r17
 212:	07 95       	ror	r16
 214:	16 95       	lsr	r17
 216:	07 95       	ror	r16
 218:	c8 01       	movw	r24, r16
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	00 0f       	add	r16, r16
 220:	11 1f       	adc	r17, r17
 222:	00 0f       	add	r16, r16
 224:	11 1f       	adc	r17, r17
 226:	00 0f       	add	r16, r16
 228:	11 1f       	adc	r17, r17
 22a:	08 0f       	add	r16, r24
 22c:	19 1f       	adc	r17, r25
 22e:	ca 01       	movw	r24, r20
 230:	80 1b       	sub	r24, r16
 232:	91 0b       	sbc	r25, r17
 234:	8c 01       	movw	r16, r24
		temp = temp / 10;				// Eg temp = 102/10 ->10
 236:	9f 01       	movw	r18, r30
 238:	36 95       	lsr	r19
 23a:	27 95       	ror	r18
 23c:	36 95       	lsr	r19
 23e:	27 95       	ror	r18
 240:	ab e7       	ldi	r26, 0x7B	; 123
 242:	b4 e1       	ldi	r27, 0x14	; 20
 244:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__umulhisi3>
 248:	7c 01       	movw	r14, r24
 24a:	f6 94       	lsr	r15
 24c:	e7 94       	ror	r14
		Hundreths_Position = temp % 10; // Eg 10   % 10  -> Remainder -> 0
 24e:	97 01       	movw	r18, r14
 250:	ad ec       	ldi	r26, 0xCD	; 205
 252:	bc ec       	ldi	r27, 0xCC	; 204
 254:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__umulhisi3>
 258:	ac 01       	movw	r20, r24
 25a:	56 95       	lsr	r21
 25c:	47 95       	ror	r20
 25e:	56 95       	lsr	r21
 260:	47 95       	ror	r20
 262:	56 95       	lsr	r21
 264:	47 95       	ror	r20
 266:	ca 01       	movw	r24, r20
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	44 0f       	add	r20, r20
 26e:	55 1f       	adc	r21, r21
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	44 0f       	add	r20, r20
 276:	55 1f       	adc	r21, r21
 278:	48 0f       	add	r20, r24
 27a:	59 1f       	adc	r21, r25
 27c:	24 1b       	sub	r18, r20
 27e:	35 0b       	sbc	r19, r21
 280:	a9 01       	movw	r20, r18
		Thousands_Position = temp / 10; // Eg 10   / 10  -> Quotient  -> 1
 282:	9f 01       	movw	r18, r30
 284:	36 95       	lsr	r19
 286:	27 95       	ror	r18
 288:	36 95       	lsr	r19
 28a:	27 95       	ror	r18
 28c:	36 95       	lsr	r19
 28e:	27 95       	ror	r18
 290:	a5 ec       	ldi	r26, 0xC5	; 197
 292:	b0 e2       	ldi	r27, 0x20	; 32
 294:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__umulhisi3>
 298:	92 95       	swap	r25
 29a:	82 95       	swap	r24
 29c:	8f 70       	andi	r24, 0x0F	; 15
 29e:	89 27       	eor	r24, r25
 2a0:	9f 70       	andi	r25, 0x0F	; 15
 2a2:	89 27       	eor	r24, r25

		//ASCII Conversion
		Ones_Position += 0x30;
 2a4:	10 e3       	ldi	r17, 0x30	; 48
 2a6:	1c 0d       	add	r17, r12
		Tens_Position += 0x30;
 2a8:	00 5d       	subi	r16, 0xD0	; 208
		Hundreths_Position += 0x30;
 2aa:	0f 2e       	mov	r0, r31
 2ac:	f0 e3       	ldi	r31, 0x30	; 48
 2ae:	ff 2e       	mov	r15, r31
 2b0:	f0 2d       	mov	r31, r0
 2b2:	f4 0e       	add	r15, r20
		Thousands_Position += 0x30;
 2b4:	0f 2e       	mov	r0, r31
 2b6:	f0 e3       	ldi	r31, 0x30	; 48
 2b8:	ef 2e       	mov	r14, r31
 2ba:	f0 2d       	mov	r31, r0
 2bc:	e8 0e       	add	r14, r24

		//REPETICION PARA EL SEGUNDO POTENCIOMETRO

		signal_2 = ADC_read(1);
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 5a 00 	call	0xb4	; 0xb4 <ADC_read>
 2c4:	6c 01       	movw	r12, r24
 2c6:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <signal_2+0x1>
 2ca:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <signal_2>
		uint8_t Hundreths_Position2 = 0;
		uint8_t Thousands_Position2 = 0;

		temp2 = signal_2;

		Ones_Position2 = temp2 % 10;	  // Eg 1023 % 10  -> Remainder -> 3
 2ce:	9c 01       	movw	r18, r24
 2d0:	ad ec       	ldi	r26, 0xCD	; 205
 2d2:	bc ec       	ldi	r27, 0xCC	; 204
 2d4:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__umulhisi3>
 2d8:	5c 01       	movw	r10, r24
 2da:	b6 94       	lsr	r11
 2dc:	a7 94       	ror	r10
 2de:	b6 94       	lsr	r11
 2e0:	a7 94       	ror	r10
 2e2:	b6 94       	lsr	r11
 2e4:	a7 94       	ror	r10
 2e6:	c5 01       	movw	r24, r10
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	aa 0c       	add	r10, r10
 2ee:	bb 1c       	adc	r11, r11
 2f0:	aa 0c       	add	r10, r10
 2f2:	bb 1c       	adc	r11, r11
 2f4:	aa 0c       	add	r10, r10
 2f6:	bb 1c       	adc	r11, r11
 2f8:	a8 0e       	add	r10, r24
 2fa:	b9 1e       	adc	r11, r25
 2fc:	b6 01       	movw	r22, r12
 2fe:	6a 19       	sub	r22, r10
 300:	7b 09       	sbc	r23, r11
 302:	5b 01       	movw	r10, r22
		temp2 = temp2 / 10;				  // Eg temp = 1023/10 ->102
 304:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__umulhisi3>
 308:	ac 01       	movw	r20, r24
 30a:	56 95       	lsr	r21
 30c:	47 95       	ror	r20
 30e:	56 95       	lsr	r21
 310:	47 95       	ror	r20
 312:	56 95       	lsr	r21
 314:	47 95       	ror	r20
		Tens_Position2 = temp2 % 10;	  // Eg 102  % 10  -> Remainder -> 2
 316:	9a 01       	movw	r18, r20
 318:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__umulhisi3>
 31c:	fc 01       	movw	r30, r24
 31e:	f6 95       	lsr	r31
 320:	e7 95       	ror	r30
 322:	f6 95       	lsr	r31
 324:	e7 95       	ror	r30
 326:	f6 95       	lsr	r31
 328:	e7 95       	ror	r30
 32a:	cf 01       	movw	r24, r30
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	ee 0f       	add	r30, r30
 332:	ff 1f       	adc	r31, r31
 334:	ee 0f       	add	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	e8 0f       	add	r30, r24
 33e:	f9 1f       	adc	r31, r25
 340:	ca 01       	movw	r24, r20
 342:	8e 1b       	sub	r24, r30
 344:	9f 0b       	sbc	r25, r31
 346:	fc 01       	movw	r30, r24
		temp2 = temp2 / 10;				  // Eg temp = 102/10 ->10
 348:	96 01       	movw	r18, r12
 34a:	36 95       	lsr	r19
 34c:	27 95       	ror	r18
 34e:	36 95       	lsr	r19
 350:	27 95       	ror	r18
 352:	ab e7       	ldi	r26, 0x7B	; 123
 354:	b4 e1       	ldi	r27, 0x14	; 20
 356:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__umulhisi3>
 35a:	4c 01       	movw	r8, r24
 35c:	96 94       	lsr	r9
 35e:	87 94       	ror	r8
		Hundreths_Position2 = temp2 % 10; // Eg 10   % 10  -> Remainder -> 0
 360:	94 01       	movw	r18, r8
 362:	ad ec       	ldi	r26, 0xCD	; 205
 364:	bc ec       	ldi	r27, 0xCC	; 204
 366:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__umulhisi3>
 36a:	ac 01       	movw	r20, r24
 36c:	56 95       	lsr	r21
 36e:	47 95       	ror	r20
 370:	56 95       	lsr	r21
 372:	47 95       	ror	r20
 374:	56 95       	lsr	r21
 376:	47 95       	ror	r20
 378:	ca 01       	movw	r24, r20
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	44 0f       	add	r20, r20
 380:	55 1f       	adc	r21, r21
 382:	44 0f       	add	r20, r20
 384:	55 1f       	adc	r21, r21
 386:	44 0f       	add	r20, r20
 388:	55 1f       	adc	r21, r21
 38a:	48 0f       	add	r20, r24
 38c:	59 1f       	adc	r21, r25
 38e:	24 1b       	sub	r18, r20
 390:	35 0b       	sbc	r19, r21
 392:	a9 01       	movw	r20, r18
		Thousands_Position2 = temp2 / 10; // Eg 10   / 10  -> Quotient  -> 1
 394:	96 01       	movw	r18, r12
 396:	36 95       	lsr	r19
 398:	27 95       	ror	r18
 39a:	36 95       	lsr	r19
 39c:	27 95       	ror	r18
 39e:	36 95       	lsr	r19
 3a0:	27 95       	ror	r18
 3a2:	a5 ec       	ldi	r26, 0xC5	; 197
 3a4:	b0 e2       	ldi	r27, 0x20	; 32
 3a6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__umulhisi3>
 3aa:	92 95       	swap	r25
 3ac:	82 95       	swap	r24
 3ae:	8f 70       	andi	r24, 0x0F	; 15
 3b0:	89 27       	eor	r24, r25
 3b2:	9f 70       	andi	r25, 0x0F	; 15
 3b4:	89 27       	eor	r24, r25

		//ASCII Conversion
		Ones_Position2 += 0x30;
 3b6:	30 e3       	ldi	r19, 0x30	; 48
 3b8:	3a 0d       	add	r19, r10
		Tens_Position2 += 0x30;
 3ba:	20 e3       	ldi	r18, 0x30	; 48
 3bc:	2e 0f       	add	r18, r30
		Hundreths_Position2 += 0x30;
 3be:	40 5d       	subi	r20, 0xD0	; 208
		Thousands_Position2 += 0x30;
 3c0:	80 5d       	subi	r24, 0xD0	; 208

		//PUNTO 3
		RESTA = signal_1 - signal_2;
 3c2:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <signal_1>
 3c6:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <signal_1+0x1>
 3ca:	6c 19       	sub	r22, r12
 3cc:	7d 09       	sbc	r23, r13
 3ce:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <__data_end+0x1>
 3d2:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <__data_end>
		if (RESTA > 0)
 3d6:	16 16       	cp	r1, r22
 3d8:	17 06       	cpc	r1, r23
 3da:	1c f4       	brge	.+6      	; 0x3e2 <main+0x2a2>
		{
			PORTB = (1 << 5);
 3dc:	90 e2       	ldi	r25, 0x20	; 32
 3de:	95 b9       	out	0x05, r25	; 5
 3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <main+0x2a4>
		}
		else
		{
			PORTB = (0 << 5);
 3e2:	15 b8       	out	0x05, r1	; 5
		}

		// Declaramos los numeros de 0 a 9
		int a[9] = {48, 49, 50, 51, 52, 53, 54, 56, 57};
 3e4:	92 e1       	ldi	r25, 0x12	; 18
 3e6:	e9 e2       	ldi	r30, 0x29	; 41
 3e8:	f1 e0       	ldi	r31, 0x01	; 1
 3ea:	de 01       	movw	r26, r28
 3ec:	a3 5b       	subi	r26, 0xB3	; 179
 3ee:	bf 4f       	sbci	r27, 0xFF	; 255
 3f0:	01 90       	ld	r0, Z+
 3f2:	0d 92       	st	X+, r0
 3f4:	9a 95       	dec	r25
 3f6:	e1 f7       	brne	.-8      	; 0x3f0 <main+0x2b0>
		int b[9] = {48, 49, 50, 51, 52, 53, 54, 56, 57};
 3f8:	92 e1       	ldi	r25, 0x12	; 18
 3fa:	e9 e2       	ldi	r30, 0x29	; 41
 3fc:	f1 e0       	ldi	r31, 0x01	; 1
 3fe:	de 01       	movw	r26, r28
 400:	db 96       	adiw	r26, 0x3b	; 59
 402:	01 90       	ld	r0, Z+
 404:	0d 92       	st	X+, r0
 406:	9a 95       	dec	r25
 408:	e1 f7       	brne	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
		int c[9] = {48, 49, 50, 51, 52, 53, 54, 56, 57};
 40a:	92 e1       	ldi	r25, 0x12	; 18
 40c:	e9 e2       	ldi	r30, 0x29	; 41
 40e:	f1 e0       	ldi	r31, 0x01	; 1
 410:	de 01       	movw	r26, r28
 412:	99 96       	adiw	r26, 0x29	; 41
 414:	01 90       	ld	r0, Z+
 416:	0d 92       	st	X+, r0
 418:	9a 95       	dec	r25
 41a:	e1 f7       	brne	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>

		// Verificar si la transmicion esta libre
		while (!(UCSR0A & (1 << UDRE0)))
 41c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 420:	95 ff       	sbrs	r25, 5
 422:	fc cf       	rjmp	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			;
		UDR0 = c[cnumero]; // Escribir registro almacenado
 424:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <cnumero>
 428:	f0 e0       	ldi	r31, 0x00	; 0
 42a:	ee 0f       	add	r30, r30
 42c:	ff 1f       	adc	r31, r31
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	70 e0       	ldi	r23, 0x00	; 0
 432:	6c 0f       	add	r22, r28
 434:	7d 1f       	adc	r23, r29
 436:	e6 0f       	add	r30, r22
 438:	f7 1f       	adc	r31, r23
 43a:	90 a5       	ldd	r25, Z+40	; 0x28
 43c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 440:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 444:	95 ff       	sbrs	r25, 5
 446:	fc cf       	rjmp	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
			;			   // Verificar si la transmicion esta libre
		UDR0 = a[dnumero]; // Escribir registro almacenado
 448:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <dnumero>
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	ee 0f       	add	r30, r30
 450:	ff 1f       	adc	r31, r31
 452:	6d e4       	ldi	r22, 0x4D	; 77
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	6c 0f       	add	r22, r28
 458:	7d 1f       	adc	r23, r29
 45a:	e6 0f       	add	r30, r22
 45c:	f7 1f       	adc	r31, r23
 45e:	90 81       	ld	r25, Z
 460:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 464:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 468:	95 ff       	sbrs	r25, 5
 46a:	fc cf       	rjmp	.-8      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
			;			  // Verificar si la transmicion esta libre
		UDR0 = b[numero]; // Escribir registro almacenado
 46c:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <numero>
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	ee 0f       	add	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	70 e0       	ldi	r23, 0x00	; 0
 47a:	6c 0f       	add	r22, r28
 47c:	7d 1f       	adc	r23, r29
 47e:	e6 0f       	add	r30, r22
 480:	f7 1f       	adc	r31, r23
 482:	92 ad       	ldd	r25, Z+58	; 0x3a
 484:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 488:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 48c:	95 ff       	sbrs	r25, 5
 48e:	fc cf       	rjmp	.-8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
			; // Verificar si la transmicion esta libre
		UDR0 = '	';
 490:	99 e0       	ldi	r25, 0x09	; 9
 492:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 496:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 49a:	95 ff       	sbrs	r25, 5
 49c:	fc cf       	rjmp	.-8      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
			;					   // Verificar si la transmicion esta libre
		UDR0 = Thousands_Position; // Escribir registro almacenado
 49e:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 4a2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4a6:	95 ff       	sbrs	r25, 5
 4a8:	fc cf       	rjmp	.-8      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
			;					   // Verificar si la transmicion esta libre
		UDR0 = Hundreths_Position; // Escribir registro almacenado
 4aa:	f0 92 c6 00 	sts	0x00C6, r15	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 4ae:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4b2:	95 ff       	sbrs	r25, 5
 4b4:	fc cf       	rjmp	.-8      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
			;				  // Verificar si la transmicion esta libre
		UDR0 = Tens_Position; // Escribir registro almacenado
 4b6:	00 93 c6 00 	sts	0x00C6, r16	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 4ba:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4be:	95 ff       	sbrs	r25, 5
 4c0:	fc cf       	rjmp	.-8      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
			;				  // Verificar si la transmicion esta libre
		UDR0 = Ones_Position; // Escribir registro almacenado
 4c2:	10 93 c6 00 	sts	0x00C6, r17	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		// Enviamos el tab (un espacio)
		while (!(UCSR0A & (1 << UDRE0)))
 4c6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4ca:	95 ff       	sbrs	r25, 5
 4cc:	fc cf       	rjmp	.-8      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
			; // Verificar si la transmicion esta libre
		UDR0 = '	';
 4ce:	99 e0       	ldi	r25, 0x09	; 9
 4d0:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 4d4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4d8:	95 ff       	sbrs	r25, 5
 4da:	fc cf       	rjmp	.-8      	; 0x4d4 <__EEPROM_REGION_LENGTH__+0xd4>
			;						// Verificar si la transmicion esta libre
		UDR0 = Thousands_Position2; // Escribir registro almacenado
 4dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 4e0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4e4:	95 ff       	sbrs	r25, 5
 4e6:	fc cf       	rjmp	.-8      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
			;						// Verificar si la transmicion esta libre
		UDR0 = Hundreths_Position2; // Escribir registro almacenado
 4e8:	40 93 c6 00 	sts	0x00C6, r20	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 4ec:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4f0:	95 ff       	sbrs	r25, 5
 4f2:	fc cf       	rjmp	.-8      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
			;				   // Verificar si la transmicion esta libre
		UDR0 = Tens_Position2; // Escribir registro almacenado
 4f4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 4f8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4fc:	95 ff       	sbrs	r25, 5
 4fe:	fc cf       	rjmp	.-8      	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
			;				   // Verificar si la transmicion esta libre
		UDR0 = Ones_Position2; // Escribir registro almacenado
 500:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 504:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 508:	85 ff       	sbrs	r24, 5
 50a:	fc cf       	rjmp	.-8      	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
			;	   // Verificar si la transmicion esta libre
		UDR0 = 10; // Escribir registro almacenado
 50c:	8a e0       	ldi	r24, 0x0A	; 10
 50e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		while (!(UCSR0A & (1 << UDRE0)))
 512:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 516:	85 ff       	sbrs	r24, 5
 518:	fc cf       	rjmp	.-8      	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
			;	   // Verificar si la transmicion esta libre
		UDR0 = 13; // Escribir registro almacenado
 51a:	8d e0       	ldi	r24, 0x0D	; 13
 51c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

		// Bucle de control para las unidades, decenas y centenas
		numero++;
 520:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <numero>
 524:	8f 5f       	subi	r24, 0xFF	; 255
 526:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <numero>
		if (numero == 9)
 52a:	89 30       	cpi	r24, 0x09	; 9
 52c:	81 f4       	brne	.+32     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
		{
			dnumero++;
 52e:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <dnumero>
 532:	8f 5f       	subi	r24, 0xFF	; 255
 534:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <dnumero>
			numero = 0;
 538:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <numero>
			if (dnumero == 9)
 53c:	89 30       	cpi	r24, 0x09	; 9
 53e:	39 f4       	brne	.+14     	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
			{
				cnumero++;
 540:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <cnumero>
 544:	8f 5f       	subi	r24, 0xFF	; 255
 546:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <cnumero>
				dnumero = 0;
 54a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <dnumero>
 54e:	7f ef       	ldi	r23, 0xFF	; 255
 550:	89 e6       	ldi	r24, 0x69	; 105
 552:	98 e1       	ldi	r25, 0x18	; 24
 554:	71 50       	subi	r23, 0x01	; 1
 556:	80 40       	sbci	r24, 0x00	; 0
 558:	90 40       	sbci	r25, 0x00	; 0
 55a:	e1 f7       	brne	.-8      	; 0x554 <__EEPROM_REGION_LENGTH__+0x154>
 55c:	00 c0       	rjmp	.+0      	; 0x55e <__EEPROM_REGION_LENGTH__+0x15e>
 55e:	00 00       	nop
			}
		}
		_delay_ms(500);
	}
 560:	25 ce       	rjmp	.-950    	; 0x1ac <main+0x6c>

00000562 <__vector_18>:
	// Buffer de entrada digital apagado en AIN0 & AIN1
	DIDR1 |= (1 << AIN0D) | (1 << AIN1D);
}

ISR(USART_RX_vect)
{
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	8f 93       	push	r24
 56e:	9f 93       	push	r25
	// Almacenamos dato actual
	myBuffer = UDR0;
 570:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 574:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>

	// Verificar si la transmicion esta libre
	while (!(UCSR0A & (1 << UDRE0)))
 578:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 57c:	85 ff       	sbrs	r24, 5
 57e:	fc cf       	rjmp	.-8      	; 0x578 <__vector_18+0x16>
		;

	// Encender led
	if (myBuffer == 'D')
 580:	94 34       	cpi	r25, 0x44	; 68
 582:	29 f4       	brne	.+10     	; 0x58e <__vector_18+0x2c>
	{
		PORTD ^= (1 << 4);
 584:	9b b1       	in	r25, 0x0b	; 11
 586:	80 e1       	ldi	r24, 0x10	; 16
 588:	89 27       	eor	r24, r25
 58a:	8b b9       	out	0x0b, r24	; 11
 58c:	02 c0       	rjmp	.+4      	; 0x592 <__vector_18+0x30>
	}
	else
	{
		// Escribir registro almacenado
		UDR0 = myBuffer;
 58e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	}
}
 592:	9f 91       	pop	r25
 594:	8f 91       	pop	r24
 596:	0f 90       	pop	r0
 598:	0f be       	out	0x3f, r0	; 63
 59a:	0f 90       	pop	r0
 59c:	1f 90       	pop	r1
 59e:	18 95       	reti

000005a0 <__vector_23>:

ISR(ANALOG_COMP_vect)
{
 5a0:	1f 92       	push	r1
 5a2:	0f 92       	push	r0
 5a4:	0f b6       	in	r0, 0x3f	; 63
 5a6:	0f 92       	push	r0
 5a8:	11 24       	eor	r1, r1
 5aa:	8f 93       	push	r24
	// Verificar ACO (bit de salida)
	if ((ACSR & 0x20) == 0)
 5ac:	00 b6       	in	r0, 0x30	; 48
 5ae:	05 fc       	sbrc	r0, 5
 5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <__vector_23+0x18>
	{
		// Enciende LED1 si Ref es mayor
		PORTD = (1 << 3);
 5b2:	88 e0       	ldi	r24, 0x08	; 8
 5b4:	8b b9       	out	0x0b, r24	; 11
 5b6:	01 c0       	rjmp	.+2      	; 0x5ba <__vector_23+0x1a>
	}
	else
	{
		// Apaga led
		PORTD = (0 << 3);
 5b8:	1b b8       	out	0x0b, r1	; 11
	}
 5ba:	8f 91       	pop	r24
 5bc:	0f 90       	pop	r0
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	0f 90       	pop	r0
 5c2:	1f 90       	pop	r1
 5c4:	18 95       	reti

000005c6 <__umulhisi3>:
 5c6:	a2 9f       	mul	r26, r18
 5c8:	b0 01       	movw	r22, r0
 5ca:	b3 9f       	mul	r27, r19
 5cc:	c0 01       	movw	r24, r0
 5ce:	a3 9f       	mul	r26, r19
 5d0:	70 0d       	add	r23, r0
 5d2:	81 1d       	adc	r24, r1
 5d4:	11 24       	eor	r1, r1
 5d6:	91 1d       	adc	r25, r1
 5d8:	b2 9f       	mul	r27, r18
 5da:	70 0d       	add	r23, r0
 5dc:	81 1d       	adc	r24, r1
 5de:	11 24       	eor	r1, r1
 5e0:	91 1d       	adc	r25, r1
 5e2:	08 95       	ret

000005e4 <_exit>:
 5e4:	f8 94       	cli

000005e6 <__stop_program>:
 5e6:	ff cf       	rjmp	.-2      	; 0x5e6 <__stop_program>
